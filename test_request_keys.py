#!/usr/bin/env python3
"""
Script pour demander les cl√©s de d√©chiffrement aux autres devices
"""
import asyncio
import os
from pathlib import Path
from nio import AsyncClient, LoginResponse, RoomKeyRequestResponse
from nio.store import SqliteStore
from nio.crypto import OlmDevice
from loguru import logger
from dotenv import load_dotenv

# Configuration
load_dotenv()
ETKE_HOMESERVER = "https://matrix.chalky.etke.host"
ETKE_USERNAME = "@florent:chalky.etke.host"
ETKE_PASSWORD = os.getenv("ETKE_PASSWORD", "")
TARGET_ROOM = "!GHTWDcxXouPfkhMVqy:chalky.etke.host"

async def request_room_keys():
    """Demander les cl√©s de d√©chiffrement"""
    logger.info("üîë Demande des cl√©s de d√©chiffrement")

    # Configuration du store pour persister les cl√©s
    store_path = Path("local_store")
    store_path.mkdir(exist_ok=True, parents=True)

    # Cr√©er le client avec store
    client = AsyncClient(
        ETKE_HOMESERVER,
        ETKE_USERNAME,
        store_path=str(store_path)
    )

    try:
        # Connexion
        logger.info(f"üîå Connexion √† {ETKE_HOMESERVER}...")
        response = await client.login(ETKE_PASSWORD, device_name="Beeper Local Test")

        if not isinstance(response, LoginResponse):
            logger.error(f"‚ùå √âchec de connexion: {response}")
            return

        logger.success(f"‚úÖ Connect√© en tant que {ETKE_USERNAME}")
        logger.info(f"   Device ID: {response.device_id}")
        logger.info(f"   Access Token: {response.access_token[:20]}...")

        # Synchronisation compl√®te
        logger.info("üîÑ Synchronisation compl√®te...")
        sync_response = await client.sync(timeout=30000, full_state=True)

        if TARGET_ROOM in client.rooms:
            room = client.rooms[TARGET_ROOM]
            logger.info(f"‚úÖ Room trouv√©e: {room.display_name}")

            # R√©cup√©rer les messages pour identifier les sessions n√©cessaires
            logger.info("üì• R√©cup√©ration des messages pour identifier les sessions...")
            messages_response = await client.room_messages(
                TARGET_ROOM,
                start="",
                limit=10,
                direction="b"
            )

            sessions_needed = set()
            if hasattr(messages_response, 'chunk'):
                for event in messages_response.chunk:
                    if hasattr(event, 'session_id'):
                        sessions_needed.add(event.session_id)
                        logger.info(f"   Session n√©cessaire: {event.session_id}")

            # Demander les cl√©s pour chaque session
            if sessions_needed:
                logger.info(f"\nüîë Demande de {len(sessions_needed)} sessions...")

                # Pour chaque session, demander les cl√©s
                for session_id in sessions_needed:
                    logger.info(f"   Demande de cl√©s pour session: {session_id}")

                    # Note: Dans une vraie impl√©mentation, on utiliserait
                    # client.request_room_key() mais cela n√©cessite le chiffrement activ√©

                # Attendre un peu pour recevoir les r√©ponses
                logger.info("‚è≥ Attente des r√©ponses (10 secondes)...")
                await asyncio.sleep(10)

                # Synchroniser √† nouveau pour voir si on a re√ßu des cl√©s
                logger.info("üîÑ Nouvelle synchronisation...")
                await client.sync(timeout=30000)

                # Essayer de r√©cup√©rer les messages √† nouveau
                logger.info("üì• Nouvelle tentative de r√©cup√©ration des messages...")
                messages_response = await client.room_messages(
                    TARGET_ROOM,
                    start="",
                    limit=5,
                    direction="b"
                )

                if hasattr(messages_response, 'chunk'):
                    for i, event in enumerate(messages_response.chunk[:3]):
                        logger.info(f"\n--- Message #{i+1} ---")
                        logger.info(f"Type: {type(event).__name__}")
                        if hasattr(event, 'body'):
                            logger.success(f"‚úÖ Message d√©chiffr√©: {event.body}")
                        elif hasattr(event, 'decrypted') and not event.decrypted:
                            logger.warning(f"üîí Message toujours chiffr√©")

        # Sauvegarder la session
        logger.info("\nüíæ Sauvegarde de la session...")
        await client.sync_store.save_sync_response(sync_response)

    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        import traceback
        logger.error(traceback.format_exc())

    finally:
        await client.close()
        logger.info("üîå D√©connexion")

if __name__ == "__main__":
    asyncio.run(request_room_keys())