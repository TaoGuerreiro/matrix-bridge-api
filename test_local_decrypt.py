#!/usr/bin/env python3
"""
Test local de d√©chiffrement des messages Matrix avec les cl√©s Element
"""
import asyncio
import os
import json
from pathlib import Path
from nio import AsyncClient, RoomMessageText, LoginResponse
from nio.events.room_events import UnknownEncryptedEvent, RoomEncryptedMedia
from nio.store import SqliteMemoryStore
from loguru import logger
from dotenv import load_dotenv
import base64

# Configuration
load_dotenv()

ETKE_HOMESERVER = "https://matrix.chalky.etke.host"
ETKE_USERNAME = "@florent:chalky.etke.host"
ETKE_PASSWORD = os.getenv("ETKE_PASSWORD", "")

# Cl√©s Element fournies par l'utilisateur
ELEMENT_SESSION_ID = "RZUGVZXKSP"
ELEMENT_SESSION_KEY = "x/FCdIFgn1vgyLPzQIiw7P2mLOPZp3Ry1vXpoo8ozXA"

# Room sp√©cifique mentionn√©e par l'utilisateur
TARGET_ROOM = "!GHTWDcxXouPfkhMVqy:chalky.etke.host"

async def test_decrypt_with_element_keys():
    """Test de d√©chiffrement avec les cl√©s Element"""
    logger.info("üîê D√©marrage du test de d√©chiffrement local")

    # Configuration du store
    store_path = Path("matrix_store_test")

    # Cr√©er le client sans chiffrement pour ce test simple
    client = AsyncClient(
        ETKE_HOMESERVER,
        ETKE_USERNAME
    )

    try:
        # Connexion
        logger.info(f"üîå Connexion √† {ETKE_HOMESERVER}...")
        response = await client.login(ETKE_PASSWORD)

        if not isinstance(response, LoginResponse):
            logger.error(f"‚ùå √âchec de connexion: {response}")
            return

        logger.success(f"‚úÖ Connect√© en tant que {ETKE_USERNAME}")

        # Synchronisation initiale
        logger.info("üîÑ Synchronisation initiale...")
        sync_response = await client.sync(timeout=30000, full_state=True)

        # V√©rifier si la room existe
        if TARGET_ROOM not in client.rooms:
            logger.warning(f"‚ö†Ô∏è Room {TARGET_ROOM} non trouv√©e")
            logger.info(f"Rooms disponibles: {list(client.rooms.keys())}")
        else:
            room = client.rooms[TARGET_ROOM]
            logger.info(f"‚úÖ Room trouv√©e: {room.display_name}")
            logger.info(f"   Chiffr√©e: {room.encrypted}")
            logger.info(f"   Membres: {len(room.users)}")

            # Essayer d'importer la session Megolm Element
            if room.encrypted:
                logger.info("üîë Tentative d'import de la session Megolm Element...")
                try:
                    # D√©coder la cl√© de session base64
                    session_key_bytes = base64.b64decode(ELEMENT_SESSION_KEY)

                    # Cr√©er un dictionnaire de session
                    session_data = {
                        "algorithm": "m.megolm.v1.aes-sha2",
                        "room_id": TARGET_ROOM,
                        "sender_key": "",  # √Ä r√©cup√©rer si possible
                        "session_id": ELEMENT_SESSION_ID,
                        "session_key": ELEMENT_SESSION_KEY,
                        "chain_index": 0
                    }

                    logger.info(f"   Session ID: {ELEMENT_SESSION_ID}")
                    logger.info(f"   Longueur cl√©: {len(session_key_bytes)} octets")

                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du traitement de la cl√©: {e}")

            # R√©cup√©rer les messages de la room
            logger.info("üì• R√©cup√©ration des messages...")
            messages_response = await client.room_messages(
                TARGET_ROOM,
                start="",
                limit=50,
                direction="b"  # backwards = plus r√©cents d'abord
            )

            if hasattr(messages_response, 'chunk'):
                logger.info(f"üìä {len(messages_response.chunk)} √©v√©nements trouv√©s")

                decrypted_count = 0
                encrypted_count = 0
                plain_count = 0

                for i, event in enumerate(messages_response.chunk[:10]):  # Les 10 premiers
                    if isinstance(event, (UnknownEncryptedEvent, RoomEncryptedMedia)):
                        encrypted_count += 1
                        logger.info(f"\nüîí Message chiffr√© #{i+1}:")
                        logger.info(f"   Type: {event.algorithm}")
                        logger.info(f"   Session ID: {event.session_id}")
                        logger.info(f"   Device ID: {event.device_id}")
                        logger.info(f"   Sender: {event.sender}")

                        # V√©rifier si c'est la m√™me session
                        if event.session_id == ELEMENT_SESSION_ID:
                            logger.success("   ‚úÖ Session ID correspond!")
                        else:
                            logger.info(f"   ‚ùì Session diff√©rente")

                        # Tentative de d√©chiffrement
                        try:
                            # Si on a la cl√© de session correspondante
                            if event.session_id == ELEMENT_SESSION_ID:
                                logger.info("   üîì Tentative de d√©chiffrement avec la cl√© Element...")
                                # Le d√©chiffrement r√©el n√©cessiterait l'int√©gration
                                # compl√®te avec le store de cl√©s

                        except Exception as e:
                            logger.error(f"   ‚ùå Erreur d√©chiffrement: {e}")

                    elif isinstance(event, RoomMessageText):
                        plain_count += 1
                        logger.info(f"\nüìù Message en clair #{i+1}:")
                        logger.info(f"   Sender: {event.sender}")
                        logger.info(f"   Contenu: {event.body[:100]}...")
                        decrypted_count += 1

                logger.info(f"\nüìä R√©sum√©:")
                logger.info(f"   Messages chiffr√©s: {encrypted_count}")
                logger.info(f"   Messages en clair: {plain_count}")
                logger.info(f"   Messages d√©chiffr√©s: {decrypted_count}")

            else:
                logger.warning("‚ùå Pas de messages dans la r√©ponse")

        # Test avec d'autres rooms Instagram
        logger.info("\nüîç Recherche de rooms Instagram...")
        instagram_rooms = []
        for room_id, room in client.rooms.items():
            if "instagram" in room.display_name.lower() or \
               any("instagram" in str(alias).lower() for alias in getattr(room, 'canonical_alias', [])):
                instagram_rooms.append((room_id, room))

        if instagram_rooms:
            logger.info(f"üì∑ {len(instagram_rooms)} rooms Instagram trouv√©es")
            for room_id, room in instagram_rooms[:3]:
                logger.info(f"\nüìç Room: {room.display_name}")
                logger.info(f"   ID: {room_id}")
                logger.info(f"   Chiffr√©e: {room.encrypted}")

                # R√©cup√©rer quelques messages
                msg_response = await client.room_messages(room_id, limit=5)
                if hasattr(msg_response, 'chunk'):
                    for event in msg_response.chunk:
                        if isinstance(event, RoomMessageText):
                            logger.success(f"   ‚úÖ Message: {event.body[:50]}...")
                        elif isinstance(event, (UnknownEncryptedEvent, RoomEncryptedMedia)):
                            logger.info(f"   üîí Message chiffr√© (session: {event.session_id[:10]}...)")

    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        import traceback
        logger.error(traceback.format_exc())

    finally:
        await client.close()
        logger.info("üîå D√©connexion")

if __name__ == "__main__":
    asyncio.run(test_decrypt_with_element_keys())